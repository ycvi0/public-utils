-- Optimized server hopping script for Roblox
-- Made By key

local PlaceID = getgenv().placeId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game.Players
local jsonFileName = "NotSameServers.json"

-- Load existing IDs or create a new file
local function loadIDs()
    local success, result = pcall(function()
        return HttpService:JSONDecode(readfile(jsonFileName))
    end)
    if success and type(result) == "table" then
        AllIDs = result
    else
        AllIDs = {actualHour}
        writefile(jsonFileName, HttpService:JSONEncode(AllIDs))
    end
end

-- Save IDs to file
local function saveIDs()
    writefile(jsonFileName, HttpService:JSONEncode(AllIDs))
end

-- Clear the file if the hour has changed
local function clearFileIfHourChanged()
    if tonumber(actualHour) ~= tonumber(AllIDs[1]) then
        pcall(function()
            delfile(jsonFileName)
        end)
        AllIDs = {actualHour}
        saveIDs()
    end
end

-- Fetch the server data from the Roblox API
local function fetchServers(cursor)
    local url = 'https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Desc&excludeFullGames=true&limit=100'
    if cursor then
        url = url .. '&cursor=' .. cursor
    end
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(url))
    end)
    print(success .. " " .. result)
    return success and result or nil
end

-- Attempt to teleport to a new server
local function tryTeleport(ID)
    table.insert(AllIDs, ID)
    saveIDs()
    print("attempt tp")
    TeleportService:TeleportToPlaceInstance(PlaceID, ID, Players.LocalPlayer)
    wait(5)
end

-- Main function to find and teleport to a suitable server
local function TPReturner()
    local Site = fetchServers(foundAnything)
    if not Site then return end

    if Site.nextPageCursor then
        foundAnything = Site.nextPageCursor
    end

    clearFileIfHourChanged()

    for _, server in ipairs(Site.data) do
        local ID = tostring(server.id)
        if tonumber(server.maxPlayers) > tonumber(server.playing) and not table.find(AllIDs, ID) then
            print("server.")
            tryTeleport(ID)
            break
        end
    end
end

-- Main teleport loop
local function Teleport()
    while wait() do
        pcall(TPReturner)
    end
end

-- Load IDs and start the teleport process
loadIDs()
Teleport()
