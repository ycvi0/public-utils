-- added proxy
local AllIDs = {} 
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local S_T = game:GetService("TeleportService")
local S_H = game:GetService("HttpService")
local Http = game:GetService("HttpService")
local Players = game:GetService("Players")

local function TPReturner(placeId)
    local Site;
    if foundAnything == "" then
        Site = S_H:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. placeId .. '/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true'))
    else
        Site = S_H:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. placeId .. '/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true&cursor=' .. foundAnything))
    end
    
    local servers = Site.data
    table.sort(servers, function(a, b)
        return tonumber(a.ping) < tonumber(b.ping)
    end)
    
    for _, server in ipairs(servers) do
        local ID = tostring(server.id)
        if tonumber(server.playing) <= 11 then
            local Possible = true
            for _, Existing in pairs(AllIDs) do
                if ID == tostring(Existing) then
                    Possible = false
                    break
                end
            end
            if Possible then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("server-finder-exclusion.json", S_H:JSONEncode(AllIDs))
                    wait()
                    S_T:TeleportToPlaceInstance(placeId, ID, Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
    
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
end

local module = {}

function module:Teleport(placeId)
    while wait() do
        pcall(function()
            TPReturner(placeId)
        end)
    end
end

return module
